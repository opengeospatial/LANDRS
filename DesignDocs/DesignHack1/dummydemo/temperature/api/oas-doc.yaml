openapi: 3.0.0
info:
  title: Temperature API
  license:
    name: MIT
  version: 1.0.0
servers:
 - url: 'http://0.0.0.0:8080/v1'
paths:
  /temperatures:
    get:
      tags:
        - temperatures
      summary: List temperature reading objects
      operationId: list_temperatures
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of temperature objects
          headers:
            x-next:
              description: A link to the next page of responses
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Temperatures'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-openapi-router-controller: swagger_server.controllers.temperatures_controller
    post:
      tags:
        - temperatures
      summary: Create a temperature reading
      operationId: create_temperature
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body'
        required: true
        x-name: temperature
      responses:
        '200':
          description: A new temperature reading
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Temperature'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-openapi-router-controller: swagger_server.controllers.temperatures_controller
  '/temperatures/{temperatureid}':
    get:
      tags:
        - temperatures
      summary: Info for a specific temperature reading
      operationId: show_temperature_by_id
      parameters:
        - description: The uuid of the temperature reading to retrieve
          explode: false
          in: path
          name: temperatureid
          required: true
          schema:
            pattern: '^\d{8}-\d{4}-\d{4}-\d{4}-\d{12}$'
            type: string
          style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Temperature'
          description: Expected response to a valid request
      x-openapi-router-controller: swagger_server.controllers.temperatures_controller
components:
  schemas:
    Body:
      description: A simple object representing one individual temperature measurement. See the example for object structure.
      properties:
        scale:
          description: The temperature scale being used to quantify the measurement
          enum:
            - celsius
            - fahrenheit
          type: string
        value:
          description: A floating number representing the temperature measurement value
          format: float
          type: number
      required:
        - value
      type: object
    Error:
      description: Represents a customized object to return to the client in the case of an error
      properties:
        code:
          description: HTTP error code to include in the response to the client
          format: int32
          type: integer
        message:
          description: A customized error message to include in the response to the client
          type: string
      required:
        - code
        - message
    Temperature:
      description: A simple object representing one individual temperature measurement. See the example for object structure.
      example:
        date: 2000-01-23T04:56:07.000Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        scale: celsius
        value: 0.8008282
      properties:
        date:
          description: The ISO 8601 date-time stamp on which this measurement was taken
          format: date-time
          type: string
        id:
          description: A UUID representing one temperature measurement
          pattern: '^\d{8}-\d{4}-\d{4}-\d{4}-\d{12}$'
          type: string
        scale:
          description: The temperature scale being used to quantify the measurement
          enum:
            - celsius
            - fahrenheit
          type: string
        value:
          description: A floating number representing the temperature measurement value 
          format: float
          type: number
      required:
        - date
        - id
        - value
    Temperatures:
      description: An array of Temperature objects
      items:
        $ref: '#/components/schemas/Temperature'
      type: array
